set $httphost $http_host; # create and initialize var
        set $docroot "";

    # begin LUA scripting
    rewrite_by_lua '
                    -- make sure http host is defined
                    if not ngx.var.httphost then
                      ngx.log(ngx.ERR,"ERROR - no httphost defined")
                      return
                    end

                       -- begin mysql
                    local mysql = require "resty.mysql"
                    local db, err = mysql:new()

                    db:set_timeout(1000) -- 1 sec

                    local ok, err, errno, sqlstate = db:connect
                    {
                            host = "127.0.0.1",
                            port = 3306,
                            database = "db",
                            user = "user",
                            password = "password",
                            max_packet_size = 1024 * 1024
                    }

                    if not ok then
                      ngx.log(ngx.ERR,"MySQL failed to connect: ", err, ": ", errno, " ", sqlstate)
                      return
                    end

                    -- prevent injection attack
                    local hname = ngx.unescape_uri(client)
                    local quoted_name = ngx.quote_sql_str(hname)

                    local sql = "select docroot from users where customer =" .. quoted_name
                    result,err,errno,sqlstate = db:query(sql,1)
                    if not result then
                       ngx.log(ngx.ERR,"MySQL bad result: ", err, ": ", errno, ": ", sqlstate, ".")
                       return
                    end

                    if not result[1].docroot then
                      ngx.log(ngx.ERR,"MySQL ERROR - no docroot was returned")
                      return
                    end

                    ngx.var.docroot = result[1].docroot
            ';
           # now we can set the docroot for this host
          root           /var/www/$docroot;

          http {
            lua_package_path "/path/to/lua-scripts/?.lua;;";
        
            server {
                listen 80;
                server_name yourdomain.com;
        
                location / {
                    default_type 'text/plain';
        
                    # Define the chunk size
                    set $chunk_size 1024;  # Adjust the chunk size as needed
        
                    # Define the Lua script to handle the request
                    content_by_lua_block {
                        local responses, err = ngx.location.capture_multi({
                            { "/backend1", { method = ngx.HTTP_GET } },
                            { "/backend2", { method = ngx.HTTP_GET } },
                            { "/backend3", { method = ngx.HTTP_GET } }
                        })
        
                        if not responses then
                            ngx.status = 500
                            ngx.say("Internal Server Error")
                            return ngx.exit(ngx.status)
                        end
        
                        -- Concatenate chunks of responses into a single body
                        local concatenated_body = ""
        
                        for _, res in ipairs(responses) do
                            if res.body then
                                -- Read chunks of the specified size
                                for i = 1, #res.body, tonumber(ngx.var.chunk_size) do
                                    concatenated_body = concatenated_body .. string.sub(res.body, i, i + tonumber(ngx.var.chunk_size) - 1)
                                end
                            end
                        end
        
                        ngx.status = 200
                        ngx.say(concatenated_body)
                    }
                }
        
                location /backend1 {
                    internal;
                    proxy_pass http://backend1.example.com;
                }
        
                location /backend2 {
                    internal;
                    proxy_pass http://backend2.example.com;
                }
        
                location /backend3 {
                    internal;
                    proxy_pass http://backend3.example.com;
                }
            }
        }
        