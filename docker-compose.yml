version: '3'
services:
  nginx:
    build:
        dockerfile: Dockerfile.nginx
    ports:
      - "80:80"

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka:2.11-2.0.1
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "CFirstCall:1:1,CFirstCallAck:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  db:
    build:
      context: .
      dockerfile: Dockerfile.mysql
    container_name: db
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    hostname: mysql
    volumes:
      - ./mysql/data:/var/lib/mysql
      - ./mysql/logs:/var/log/mysql

  filesystem:
    build:
      context: ./filesystem
      dockerfile: Dockerfile.scripts
    
    depends_on:
      - zookeeper
      - kafka
      - manager
    volumes: 
      - ./filesystem:/app/filesystem
    hostname: filesystem
    container_name: filesystem
 

  
  manager:
    build:
      context: ./manager
      dockerfile: Dockerfile.scripts
    
    depends_on:
      - zookeeper
      - kafka
      - db
    volumes: 
      - ./manager:/app/manager
    hostname: Manager
    container_name: manager


  controller_manager:
    build:
      context: ./controller_manager
      dockerfile: Dockerfile.scripts
    
    depends_on:
      - zookeeper
      - kafka
      - db
      - manager
    volumes: 
      - ./controller_manager:/app/controller_manager
    hostname: cManager
    container_name: controller_manager

  download_controller1:
    build:
      context: ./download_controller
      dockerfile: Dockerfile.scripts
    
    depends_on:
      - zookeeper
      - kafka
      - db
      - controller_manager
    volumes: 
      - ./download_controller:/app/download_controller
    hostname: cDownload1
    container_name: download_controller1

  download_controller2:
    build:
      context: ./download_controller
      dockerfile: Dockerfile.scripts
    
    depends_on:
      - zookeeper
      - kafka
      - db
      - controller_manager
    volumes: 
      - ./download_controller:/app/download_controller
    hostname: cDownload2
    container_name: download_controller2
  
  uploadcontroller:
    build:
      context: ./uploadcontroller
      dockerfile: Dockerfile.scripts
    
    depends_on:
      - zookeeper
      - kafka
      - db
      - controller_manager
    volumes: 
      - ./uploadcontroller:/app/uploadcontroller
    hostname: cUpload
    container_name: uploadcontroller

  testmysql:
    build:
      context: ./testmysql
      dockerfile: Dockerfile.scripts
    
    depends_on:
      - db
    volumes:
      - ./testmysql:/app/testmysql
    hostname: testmysql
    container_name: testmysql

volumes:
  zookeeper:
  kafka:
  db:
  filesystem:
  manager:
  controller_manager:
  download_controller:
  uploadcontroller:
  testmysql: