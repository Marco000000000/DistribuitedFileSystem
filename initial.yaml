apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: distribuitedfilesystem-nginx:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 80

#      networks:
#      - vpcbr
---

apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 80
      nodePort: 30000
  type: NodePort

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: distribuitedfilesystem-db:latest
        imagePullPolicy: Never
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: giovanni
        - name: MYSQL_DATABASE
          value: ds_filesystem
        - name: MYSQL_USER
          value: user
        - name: MYSQL_PASSWORD
          value: user
        ports:
        - containerPort: 3306
  #       volumeMounts:
  #       - name: mysql-persistent-storage
  #         mountPath: /var/lib/mysql
  # volumes:
  # - name: mysql-persistent-storage
  #   persistentVolumeClaim:
  #     claimName: mysql-pv-claim
#      volumes:
#     r - name: mysql-data
#        hostPath:
#          path: /path/to/mysql-data
#      - name: mysql-logs
#        hostPath:
#          path: /path/to/mysql-logs
#      networks:
#      - vpcb
---
apiVersion: v1
kind: Service
metadata:
  name: db
spec:
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: wurstmeister/zookeeper:3.4.6
        ports:
        - containerPort: 2181
#      networks:
#      - vpcbr
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-service
spec:
  selector:
    app: zookeeper
  ports:
    - protocol: TCP
      port: 2181
      targetPort: 2181
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka
        image: wurstmeister/kafka:2.11-2.0.1
        ports:
        - containerPort: 9092
        - containerPort: 9093
        env:
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "INSIDE://kafka-service:9093"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT"
        - name: KAFKA_LISTENERS
          value: "INSIDE://0.0.0.0:9093"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: "INSIDE"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper-service:2181"
        - name: JMX_PORT
          value: "9010"
      - name: kafka-exporter
        image: danielqsj/kafka-exporter:latest
        args:
          - "--kafka.server=kafka-service-exporter:9093"
        ports:
          - name: metrics
            containerPort: 9308


---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
spec:
  selector:
    app: kafka
  ports:
    - protocol: TCP
      port: 9093
      targetPort: 9093    
  type: ClusterIP

---

apiVersion: v1
kind: Service
metadata:
  name: kafka-service-exporter
  annotations:
      prometheus.io/scrape: 'true'
      prometheus.io/port:   '9308'
spec:
  selector:
    app: kafka
  ports:
    - protocol: TCP
      port: 9308
      targetPort: 9308
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: kafka-storage
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kafka-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  selector:
    matchLabels:
      app: kafka
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: filesystem-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: filesystem
  template:
    metadata:
      labels:
        app: filesystem
    spec:
      containers:
      - name: filesystem
        image: distribuitedfilesystem-filesystem1:latest
        imagePullPolicy: Never
        

#        volumes:
#        - name: filesystem
#          hostPath:
#            path: /path/to/filesystem
#      networks:
#      - vpcbr
---
apiVersion: v1
kind: Service
metadata:
  name: filesystem-service
spec:
  selector:
    app: filesystem
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: manager-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: manager
  template:
    metadata:
      labels:
        app: manager
    spec:
      containers:
      - name: manager
        image: distribuitedfilesystem-manager:latest
        imagePullPolicy: Never

#        volumes:
#        - name: manager
#          hostPath:
#            path: /path/to/manager
#      networks:
#      - vpcbr

---
apiVersion: v1
kind: Service
metadata:
  name: manager-service
spec:
  selector:
    app: manager
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller-manager-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: controllermanager
  template:
    metadata:
      labels:
        app: controllermanager
    spec:
      containers:
      - name: controllermanager
        image: distribuitedfilesystem-controller_manager:latest
        imagePullPolicy: Never

#        volumes:
#        - name: controller_manager
#          hostPath:
#            path: /path/to/controller_manager
#      networks:
#      - vpcbr
---
apiVersion: v1
kind: Service
metadata:
  name: controller-manager-service
spec:
  selector:
    app: controllermanager
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: download-controller-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: downloadcontroller
  template:
    metadata:
      labels:
        app: downloadcontroller
    spec:
      containers:
      - name: downloadcontroller
        image: distribuitedfilesystem-download_controller1:latest
        imagePullPolicy: Never
---
#        volumes:
#        - name: download_controller1
#          hostPath:
#            path: /path/to/download_controller1
#      networks:
#      - vpcbr


#        volumes:
#        - name: download_controller2
#          hostPath:
#            path: /path/to/download_controller2
#      networks:
#      - vpcbr

---
apiVersion: v1
kind: Service
metadata:
  name: download-controller-service
  annotations:
      prometheus.io/scrape: 'true'
      prometheus.io/port:   '80'
spec:
  selector:
    app: downloadcontroller  # Common label selector for both download_controller1 and download_controller2
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: uploadcontroller-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: uploadcontroller
  template:
    metadata:
      labels:
        app: uploadcontroller
    spec:
      containers:
      - name: uploadcontroller
        image: distribuitedfilesystem-uploadcontroller:latest
        imagePullPolicy: Never


---
apiVersion: v1
kind: Service
metadata:
  name: uploadcontroller-service
spec:
  selector:
    app: uploadcontroller
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: updatecontroller-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: updatecontroller
  template:
    metadata:
      labels:
        app: updatecontroller
    spec:
      containers:
      - name: updatecontroller
        image: distribuitedfilesystem-updatecontroller:latest
        imagePullPolicy: Never


---
apiVersion: v1
kind: Service
metadata:
  name: updatecontroller-service
spec:
  selector:
    app: updatecontroller
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qosmanager-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: qosmanager
  template:
    metadata:
      labels:
        app: qosmanager
    spec:
      containers:
      - name: qosmanager
        image: distribuitedfilesystem-qosmanager:latest
        imagePullPolicy: Never
      serviceAccountName: deployment-manager
---

apiVersion: v1
kind: Service
metadata:
  name: qosmanager-service
spec:
  selector:
    app: qosmanager
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: deployment-manager
  namespace: default

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: deployment-manager
rules:
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["create", "get", "list", "watch", "update", "patch", "delete"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: deployment-manager
  namespace: default
subjects:
- kind: ServiceAccount
  name: deployment-manager # Name of the ServiceAccount
  namespace: default
roleRef:
  kind: ClusterRole
  name: deployment-manager
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pod-reader
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pod-reader-binding
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
roleRef:
  kind: ClusterRole
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:v2.28.0
        args:
          - "--config.file=/etc/prometheus/prometheus.yml"
          - "--storage.tsdb.path=/prometheus"
        ports:
          - containerPort: 9090
        volumeMounts:
          - name: config-volume
            mountPath: /etc/prometheus
          - name: storage-volume
            mountPath: /prometheus
      volumes:
        - name: config-volume
          configMap:
            name: prometheus-server-conf
        - name: storage-volume
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  annotations:
      prometheus.io/scrape: 'true'
      prometheus.io/port:   '9090'
spec:
  selector: 
    app: prometheus
  type: ClusterIP  
  ports:
    - port: 9090
      targetPort: 9090 
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-server-conf
  labels:
    name: prometheus-server-conf
data:
  prometheus.rules: |-
    # groups:
    # - name: devopscube demo alert
    #   rules:
    #   - alert: High Pod Memory
    #     expr: sum(container_memory_usage_bytes) > 1
    #     for: 1m
    #     labels:
    #       severity: slack
    #     annotations:
    #       summary: High Memory Usage
  prometheus.yml: |-
    global:
      scrape_interval: 5s
      evaluation_interval: 5s
    # rule_files:
    #   - /etc/prometheus/prometheus.rules
    # alerting:
    #   alertmanagers:
    #   - scheme: http
    #     static_configs:
    #     - targets:
    #       - "alertmanager.monitoring.svc:9093"
    scrape_configs:
      # - job_name: 'node-exporter'
      #   kubernetes_sd_configs:
      #     - role: endpoints
      #   relabel_configs:
      #   - source_labels: [__meta_kubernetes_endpoints_name]
      #     regex: 'node-exporter'
      #     action: keep
      # - job_name: 'kubernetes-apiservers'
      #   kubernetes_sd_configs:
      #   - role: endpoints
      #   scheme: https
      #   tls_config:
      #     ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      #   bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      #   relabel_configs:
      #   - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
      #     action: keep
      #     regex: default;kubernetes;https
      # - job_name: 'kubernetes-nodes'
      #   scheme: https
      #   tls_config:
      #     ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      #   bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      #   kubernetes_sd_configs:
      #   - role: node
      #   relabel_configs:
      #   - action: labelmap
      #     regex: __meta_kubernetes_node_label_(.+)
      #   - target_label: __address__
      #     replacement: kubernetes.default.svc:443
      #   - source_labels: [__meta_kubernetes_node_name]
      #     regex: (.+)
      #     target_label: __metrics_path__
      #     replacement: /api/v1/nodes/${1}/proxy/metrics
      # - job_name: 'kubernetes-pods'
      #   kubernetes_sd_configs:
      #   - role: pod
      #   relabel_configs:
      #   - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
      #     action: keep
      #     regex: true
      #   - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
      #     action: replace
      #     target_label: __metrics_path__
      #     regex: (.+)
      #   - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
      #     action: replace
      #     regex: ([^:]+)(?::\d+)?;(\d+)
      #     replacement: $1:$2
      #     target_label: __address__
      #   - action: labelmap
      #     regex: __meta_kubernetes_pod_label_(.+)
      #   - source_labels: [__meta_kubernetes_namespace]
      #     action: replace
      #     target_label: kubernetes_namespace
      #   - source_labels: [__meta_kubernetes_pod_name]
      #     action: replace
      #     target_label: kubernetes_pod_name
      # - job_name: 'kube-state-metrics'
      #   static_configs:
      #     - targets: ['kube-state-metrics.kube-system.svc.cluster.local:8080']
      # - job_name: 'kubernetes-cadvisor'
      #   scheme: https
      #   tls_config:
      #     ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      #   bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      #   kubernetes_sd_configs:
      #   - role: node
      #   relabel_configs:
      #   - action: labelmap
      #     regex: __meta_kubernetes_node_label_(.+)
      #   - target_label: __address__
      #     replacement: kubernetes.default.svc:443
      #   - source_labels: [__meta_kubernetes_node_name]
      #     regex: (.+)
      #     target_label: __metrics_path__
      #     replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
      - job_name: 'kubernetes-service-endpoints'
        kubernetes_sd_configs:
        - role: endpoints
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          action: replace
          target_label: __scheme__
          regex: (https?)
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_name